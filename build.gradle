apply plugin: 'java'
apply plugin: 'java-library-distribution'

sourceCompatibility = 1.8
version = '1.0'

def buildDest = "$buildDir/ping-pong-full/"

ext {
    springVersion = '4.1.2.RELEASE'
    nettyVersion = '4.0.26.Final'
    groovyVersion = '2.3.8'
    logbackVersion = '1.0.13'
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'io.netty', name: 'netty-all', version: nettyVersion
    compile group: 'org.springframework', name: 'spring-aop', version: springVersion
    compile group: 'org.springframework', name: 'spring-context-support', version: springVersion
    compile 'org.springframework.data:spring-data-mongodb:1.6.2.RELEASE'
    compile 'com.google.code.gson:gson:2.3.1'
    compile group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion
    compile 'com.hazelcast:hazelcast-all:3.4.1'
    compile 'com.hazelcast:hazelcast-spring:3.4.1'
    compile 'com.esotericsoftware:kryo-shaded:3.0.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion

}

jar {
    from sourceSets.main.resources
    exclude('**/*.properties')
    exclude('**/*.xml')
    exclude('**/*.sh')
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}

task copyConfigs(type: Copy) {
    from('src/main/resources') {
        include '**/*.properties'
        include '**/*.xml'
    }
    into "${buildDest}/config"

    includeEmptyDirs = false
}

task copyScripts(type: Copy) {
    from('src/main/resources') {
        include '**/*.sh'
    }
    into "${buildDest}"
    includeEmptyDirs = false
}

task copyToLib(type: Copy) {
    into "$buildDest/lib"
    from configurations.runtime
}

task copyArtifact(type: Copy) {

        from("${project.buildDir}/libs") {
            include '**/*.jar'
        }
        into "${buildDest}/lib"
    includeEmptyDirs = false
}

processTestResources.dependsOn copyTestResources
build.dependsOn copyConfigs

build.dependsOn(copyConfigs, copyToLib, copyArtifact, copyScripts)
